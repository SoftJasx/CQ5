import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'plusMinus' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void plusMinus(List<Integer> arr) {
    int positiveCount = 0;
    int negativeCount = 0;
    int zeroCount = 0;

    for (int num : arr) {
        if (num > 0) {
            positiveCount++;
        } else if (num < 0) {
            negativeCount++;
        } else {
            zeroCount++;
        }
    }

    System.out.printf("%.6f\n", positiveCount / (double) arr.size());
    System.out.printf("%.6f\n", negativeCount / (double) arr.size());
    System.out.printf("%.6f\n", zeroCount / (double) arr.size());
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        Result.plusMinus(arr);

        bufferedReader.close();
        /*
         * The time complexity is O(n) as it requires a single pass through the list of n elements.
         *
         * The space complexity is O(1), as it uses a fixed amount of extra space for counters, regardless of the input size.
         */
    }
}
